"use strict";

require("core-js/modules/es.object.from-entries");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.reverseTargetMappings = reverseTargetMappings;
exports.default = DetermineTargetsFromConfig;
exports.Versioning = Versioning;
exports.STANDARD_TARGET_NAME_MAPPING = void 0;

var _browserslist = _interopRequireDefault(require("browserslist"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const STANDARD_TARGET_NAME_MAPPING = {
  chrome: 'Chrome',
  firefox: 'Firefox',
  safari: 'Safari',
  ios_saf: 'iOS Safari',
  ie: 'IE',
  ie_mob: 'IE Mobile',
  edge: 'Edge',
  baidu: 'Baidu',
  electron: 'Electron',
  blackberry_browser: 'Blackberry Browser',
  edge_mobile: 'Edge Mobile',
  and_uc: 'Android UC Browser',
  and_chrome: 'Android Chrome',
  and_firefox: 'Android Firefox',
  and_webview: 'Android Webview',
  and_samsung: 'Samsung Browser',
  and_opera: 'Opera Android',
  opera: 'Opera',
  opera_mini: 'Opera Mini',
  opera_mobile: 'Opera Mobile',
  node: 'Node.js',
  kaios: 'KaiOS'
};
exports.STANDARD_TARGET_NAME_MAPPING = STANDARD_TARGET_NAME_MAPPING;

function reverseTargetMappings(targetMappings) {
  const reversedEntries = Object.entries(targetMappings).map(entry => entry.reverse());
  return Object.fromEntries(reversedEntries);
}

/**
 * Determine the targets based on the browserslist config object
 *
 * @param configPath - The file or a directory path to look for the browserslist config file
 */
function DetermineTargetsFromConfig(configPath, config) {
  const browserslistOpts = {
    path: configPath
  };

  if (Array.isArray(config) || typeof config === 'string') {
    return (0, _browserslist.default)(config, browserslistOpts);
  }

  if (config && typeof config === 'object') {
    return (0, _browserslist.default)([...(config.production || []), ...(config.development || [])], browserslistOpts);
  }

  return (0, _browserslist.default)(undefined, browserslistOpts);
}
/**
 * Take a list of targets returned from browserslist api, return the lowest version
 * version of each target
 */


function Versioning(targetslist) {
  return targetslist // Sort the targets by target name and then version number in ascending order
  .map(e => {
    const [target, version] = e.split(' ');
    return {
      target,
      version,
      parsedVersion: version === 'all' ? 0 : version.includes('-') ? parseFloat(version.split('-')[0]) : parseFloat(version)
    };
  }) // Sort the targets by target name and then version number in descending order
  // ex. [a@3, b@3, a@1] => [a@3, a@1, b@3]
  .sort((a, b) => {
    if (b.target === a.target) {
      // If any version === 'all', return 0. The only version of op_mini is 'all'
      // Otherwise, compare the versions
      return typeof b.parsedVersion === 'string' || typeof a.parsedVersion === 'string' ? 0 : b.parsedVersion - a.parsedVersion;
    }

    return b.target > a.target ? 1 : -1;
  }) // First last target always has the latest version
  .filter((e, i, items) => // Check if the current target is the last of its kind. If it is, then it
  // is most recent version
  i + 1 === items.length || e.target !== items[i + 1].target);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,